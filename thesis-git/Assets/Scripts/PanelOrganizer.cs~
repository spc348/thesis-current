using System.Collections;
using UnityEngine;

public class PanelOrganizer : MonoBehaviour
{
	public GameObject[] Panels, Lives, Subpanels, Audiotriggers, Markers;
	public GameObject GameText, Panel0, Panel1, Panel2, Panel3, Panel4, Panel5, Panel6, Player;
	public GameObject Health0, Health1, Health2;
	public int ActivePanel, StartPanel, EndPanel, GamePanel;
	public Camera MainCamera;
	public GameObject GamepanelSubpanel1, GamepanelSubpanel2, GamepanelSubpanel3, GamepanelSubpanel4;
	public GameObject GamepanelSubpanel5, GamepanelSubpanel6, GamepanelSubpanel7;
	static bool useTextInstruction;

	public static PanelOrganizer PanelsRef;

	public static bool UseTextInstruction {
		get {
			return useTextInstruction;
		}
		set {
			useTextInstruction = value;
		}
	}

	void Awake ()
	{
		PanelsRef = this;
	}

	void Start ()
	{
		MainCamera = Camera.main;
		EndPanel = 6;
		GamePanel = 5;
		Player = GameObject.FindGameObjectWithTag ("Player");
		ActivePanel = 0;
		MainPanel ();
	}

	void MainPanel ()
	{
		Panels = new GameObject[8];

		Panels [0] = Panel0;
		Panels [1] = Panel1;
		Panels [2] = Panel2;
		Panels [3] = Panel3;
		Panels [4] = Panel4;
		Panels [5] = GameText;
		Panels [6] = Panel5;
		Panels [7] = Panel6;
	}

	public void GameSubpanel ()
	{
		// should be selected courselength
		Subpanels = new GameObject[PreferenceSelections.PlayerInstance.CourseLength];

		Subpanels [0] = GamepanelSubpanel1;
		Subpanels [1] = GamepanelSubpanel2;
		Subpanels [2] = GamepanelSubpanel3;
		Subpanels [3] = GamepanelSubpanel4;
		Subpanels [4] = GamepanelSubpanel5;
		Subpanels [5] = GamepanelSubpanel6;
		Subpanels [6] = GamepanelSubpanel7;

		Subpanels [0].SetActive (false);
		Subpanels [1].SetActive (false);
		Subpanels [2].SetActive (false);
		Subpanels [3].SetActive (false);
		Subpanels [4].SetActive (false);
		Subpanels [5].SetActive (false);
		Subpanels [6].SetActive (false);
	}

	public void ClearSubpanels ()
	{
		for (int i = 0; i < PreferenceSelections.PlayerInstance.CourseLength; i++) {
			Subpanels [i].SetActive (false);
		}
	}

	public void InitGameSubpanel (int panel)
	{
		ClearSubpanels ();

		Subpanels [panel].SetActive (true);

	}

	public void Restart ()
	{
		foreach (var i in Markers) {
			Destroy (i);
		}
		for (int i = 0; i < Lives.Length; i++) {
			Lives [i].SetActive (true);
		}
		SetPanel (StartPanel);
	}

	public void DrawLivesLeft ()
	{
		for (int i = 0; i < Lives.Length; i++) {
			Lives [i].SetActive (true);
		}
	}

	public void GameStart ()
	{
		GameSubpanel ();
		Lives = new GameObject[GameManager.Life];
		Lives [0] = Health0;
		Lives [1] = Health1;
		Lives [2] = Health2;

		DrawLivesLeft ();

		for (int i = 0; i < Panels.Length; i++) {
			Panels [i].SetActive (false);
		}
	}

	public void AddLife ()
	{
		GameManager.Life++;
	}

	public void SubLife ()
	{
		GameManager.Life--;
		Lives [GameManager.Life].SetActive (false);
	}

	public void SetPanel (int active)
	{
		ActivePanel = active;
		ClearPanels (active);
	}

	void ClearPanels (int active)
	{
		for (int i = 0; i < Panels.Length; i++) {
			if (i != active) {
				Panels [i].SetActive (false);
			}
		}
	}

	void Update ()
	{
		if (!Panels [ActivePanel].activeSelf)
			Panels [ActivePanel].SetActive (true);

		//if (GameManager.GameManagerRef.Life == 0 && ActivePanel == GamePanel)
		//SetPanel (EndPanel);

		if (ActivePanel == GamePanel) {
			Player.GetComponent<Collider> ().enabled = true;
			MainCamera.enabled = true;
		} else {
			MainCamera.enabled = false;
			Player.GetComponent<Collider> ().enabled = false;
		}

		if (Input.GetKeyDown (KeyCode.Space)) {
			ClearSubpanels ();
		}
	}

	public void AtFinal ()
	{
		SetPanel (EndPanel);
	}
}
