using UnityEngine;
using System.Collections.Generic;

public class CourseScript : MonoBehaviour
{

	public Dictionary<int, Vector3> Positions;
	public Dictionary<string, AudioClip> ClipLibrary;
	public List<GameObject> MarkersList;
	public GameObject[] LoadedMarkers, Audiotriggers;
	public GameObject Player, CheckPrefab;
	public int NextMarker, PresentMarker, PreviousMarker, ApproachedMarker;

	public AudioTrigger AudioScript;

	public bool LifeFlag, AtCheckPoint;
	static int courseLength;
	public GameObject M1, M2, M3, M4, M5, M6, Cat;
	GameObject[] Markers;
	public float DistToNext;

	//Timing between landmarks
	public float[] TimeToLandmarks;
	float CurrentTime;
	bool ToCount;

	public static CourseScript CourseRef;

	public static int CourseLength {
		get {
			return courseLength;
		}
		set {
			courseLength = value;
		}
	}

	void Awake ()
	{
		courseLength = 7;
		CourseRef = this;
	}

	void Update ()
	{
		if (PreferenceSelections.PrefsSelected) {
			courseLength = PreferenceSelections.PlayerInstance.CourseLength;
		}
	}

	void Start ()
	{
		NextMarker = 0;
		PresentMarker = 0;
		LifeFlag = false;
		AtCheckPoint = false;

		CurrentTime = 0f;
		TimeToLandmarks = new float[courseLength];
		ToCount = false;
	}

	void LateUpdate ()
	{

		if (AtCheckPoint) { // at a landmark

			PresentMarker = ApproachedMarker; // observe current location from marker

			NextMarker = ChartNextMove (PresentMarker); // determine where to go next

			if (CheckOffTrack () && !LifeFlag) { // determine if not going in the right direction and record errors
				PanelOrganizer.PanelsRef.SubLife ();
				PreferenceSelections.PrefsRef.Errors += 1;
				LifeFlag = true;
			}
		
		} else {
			PreviousMarker = PresentMarker; 
			LifeFlag = false;
		}



		if (PanelOrganizer.PanelsRef.ActivePanel == PanelOrganizer.PanelsRef.GamePanel && PreferenceSelections.PrefsSelected) {
			InitDistanceTracking (); //check distance to the next desired marker
		}


	}

	void loadMarkerStandins () //load markers from the scene to this script
	{
		LoadedMarkers = new GameObject[courseLength];
		LoadedMarkers [0] = M1;
		LoadedMarkers [1] = M2;
		LoadedMarkers [2] = M3;
		LoadedMarkers [3] = M4;
		LoadedMarkers [4] = M5;
		LoadedMarkers [5] = M6;
		LoadedMarkers [6] = Cat;
	}

	public void GameStart () // Booting the game
	{
		MarkersList = new List<GameObject> (); // list of markers in the game
		loadMarkerStandins (); // using the positions of stand ins
		ClearMarkers (); // clear any relic markers
		MakeAudioLibrary (); //assemble the audio clip libary from resources folder
		MakeCourse (DesignCourse (MarkerCollection ())); // insert prefab markers into position, in the designed order, with the
		// correct directional audio clips
		Player.transform.position = PlayerScript.PlayerStartPosition;
		Player.transform.rotation = PlayerScript.PlayerStartRotation; // set the player in the starting position
		ResetFlags (); //removed any relic flag information
	}

	void MakeAudioLibrary ()
	{
		//load and label audio files into the game 
		ClipLibrary = new Dictionary<string, AudioClip> ();

		//at the
		ClipLibrary.Add ("atThe", Resources.Load<AudioClip> ("atThe"));

		//directionals
		ClipLibrary.Add ("check", Resources.Load<AudioClip> ("check"));
		ClipLibrary.Add ("great job", Resources.Load<AudioClip> ("greatjob"));
		ClipLibrary.Add ("stop", Resources.Load<AudioClip> ("stop"));
		ClipLibrary.Add ("turn around", Resources.Load<AudioClip> ("turnaround"));
		ClipLibrary.Add ("turn left", Resources.Load<AudioClip> ("turnleft"));
		ClipLibrary.Add ("turn right", Resources.Load<AudioClip> ("turnright"));
		ClipLibrary.Add ("forward", Resources.Load<AudioClip> ("forward"));
		//landmarks
		ClipLibrary.Add ("trashcan", Resources.Load<AudioClip> ("trashcan"));
		ClipLibrary.Add ("Missy", Resources.Load<AudioClip> ("Missy"));
		ClipLibrary.Add ("crosswalk", Resources.Load<AudioClip> ("crosswalk"));
		ClipLibrary.Add ("streetlamp", Resources.Load<AudioClip> ("streetlamp"));
		ClipLibrary.Add ("streetlight", Resources.Load<AudioClip> ("streetlight"));
		ClipLibrary.Add ("hydrant", Resources.Load<AudioClip> ("hydrant"));
		ClipLibrary.Add ("tree", Resources.Load<AudioClip> ("tree"));

	}

	public Vector3[] MarkerCollection ()
	{
		// derive position from marker stand ins

		Vector3[] markerVectors = new Vector3[courseLength];

		for (int i = 0; i < markerVectors.Length; i++) {
			markerVectors [i] = LoadedMarkers [i].transform.position;
		}

		return markerVectors;
	}

	Dictionary<int, Vector3> DesignCourse (Vector3[] vectors)
	{
		//order the positions of the markers for the specified course

		Dictionary<int, Vector3> positions = new Dictionary<int, Vector3> ();

		positions.Add (0, vectors [0]);
		positions.Add (1, vectors [1]);
		positions.Add (2, vectors [2]);
		positions.Add (3, vectors [3]);
		positions.Add (4, vectors [4]);
		positions.Add (5, vectors [5]);
		positions.Add (6, vectors [6]);

		return positions;
	}

	void MakeCourse (Dictionary<int, Vector3> positions)
	{
		// reference the correct audio files using easy to read labels

		string[] SevenCourseDirections = new string[courseLength];
		SevenCourseDirections [0] = "forward";
		SevenCourseDirections [1] = "turn left";
		SevenCourseDirections [2] = "turn right";
		SevenCourseDirections [3] = "turn left";
		SevenCourseDirections [4] = "stop";
		SevenCourseDirections [5] = "turn right";
		SevenCourseDirections [6] = "turn left";

		string[] SevenCourseLandmarks = new string[courseLength];
		SevenCourseLandmarks [0] = "trashcan";
		SevenCourseLandmarks [1] = "tree";
		SevenCourseLandmarks [2] = "crosswalk";
		SevenCourseLandmarks [3] = "streetlight";
		SevenCourseLandmarks [4] = "streetlamp";
		SevenCourseLandmarks [5] = "hydrant";
		SevenCourseLandmarks [6] = "Missy";

		foreach (KeyValuePair<int, Vector3> kvp in positions) {
			//make an audio checkpoint 
			GameObject marker = Instantiate (CheckPrefab, kvp.Value, Quaternion.identity) as GameObject; //generate marker prefab in the scene
			MarkersList.Add (marker);
			marker.tag = "marker";
			AudioScript = marker.GetComponent<AudioTrigger> ();
			AudioScript.Direction = ClipLibrary [SevenCourseDirections [kvp.Key]];
			AudioScript.LandmarkName = ClipLibrary [SevenCourseLandmarks [kvp.Key]];
			AudioScript.Place = kvp.Key;
			AudioScript.HasPlayed = false;

			if (AudioScript.Place == courseLength - 1)
				AudioScript.Final = true;
		}
	}

	public void AtFinal ()
	{
		PanelOrganizer.PanelsRef.SetPanel (PanelOrganizer.PanelsRef.EndPanel); //end the game

	}

	public void ResetFlags ()
	{
		// find all the markers and clear relic flags

		Audiotriggers = GameObject.FindGameObjectsWithTag ("marker");
		foreach (var i in Audiotriggers) {
			AudioTrigger script = i.GetComponent<AudioTrigger> ();
			script.ResetPlayedFlag ();
		}
	}

	// very basic course check
	bool CheckOffTrack ()
	{
		return PreviousMarker - PresentMarker > 1 || PresentMarker < PreviousMarker;
	}
	// very basic navigational check
	int ChartNextMove (int num)
	{
		return ++num;
	}

	public void Restart () //restart the game
	{
		ClearMarkers ();
		ResetFlags ();
	}

	public void ClearMarkers () //remove markers from last game
	{
		foreach (var i in MarkersList) {
			Destroy (i);
		}
	}

	public void InitDistanceTracking () // checks distance from player to next marker
	{
		Markers = GameObject.FindGameObjectsWithTag ("marker"); //find current markers
		if (Markers [0] != null) { //if they are present
			// track distance to the next marker
			DistToNext = Vector3.Distance (Player.transform.position, Markers [NextMarker].transform.position);
		}
	}
}
